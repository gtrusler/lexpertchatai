# Windsurf Rules for Lexpert Case AI

## Project Context
- Purpose: A RAG chatbot for family law and trademark attorneys to draft legal documents and handle case-specific uploads.
- Goals: 3-5s responses, 95% accuracy, CodeGuide-style UI (deep blue #0078D4, white cards, light gray #F5F6F7).
- Spec: If `spec.md` exists in the root, use it as the primary guide for end-to-end feature implementation.

## Project Structure
- `/src/frontend`: React frontend code.
  - `/components`: Reusable UI components (e.g., Card, Button).
  - `/pages`: Main page components.
  - `/context`: React Context providers.
- `/backend`: FastAPI backend code.
- Run commands:
  - Frontend: `cd src/frontend && npm run dev` (http://localhost:5173).
  - Backend: `cd backend && uvicorn main:app --reload` (http://localhost:8000).
  - Activate env: `conda activate lexpert_case_ai`.

## Coding Standards
- Python: Use Pydantic for type hints in FastAPI, chunk docs into 500-token segments for RAG, keep files <300 lines.
- React: Use Tailwind CSS, functional components, named exports (e.g., `export const MyComponent`).
- UI: Deep blue (#0078D4) for buttons/headers, white cards, light gray (#F5F6F7) background.
- Terminology: "Assistant" (not "Bot"), "Case" (legal matter), "Document" (file), "Chat" (interface), "Dashboard" (landing page), "Wizard" (assistant creation).

## Best Practices
- Use Supabase for auth, storage (`documents` bucket), and VectorDB (pgvector).
- Auto-tag uploads with spaCy (85%+ confidence, prompt if <85%).
- Handle errors: Try-catch for Supabase ops, show user-friendly messages, no stubbing in dev/prod.
- Optimize: Use HNSW/IVF indexing in Supabase VectorDB, aim for 3-5s responses.
- Avoid duplication: Check existing code before adding similar logic; remove old implementations if replaced.

## AI Behavior
- Support agentic coding: With a spec or clear prompt, write full features (e.g., RAG pipeline, UI components).
- Suggest legal citations (e.g., Texas §153.002) when drafting documents.
- If context is missing: "I don’t have prior project context. I’ll use the current codebase and your input. Add details here or use Cascade Memories for continuity."
- Prioritize modular code for future agentic RAG enhancements.

## Known Issues
- Clickable elements may need server restarts—check event handlers in Card components.
- Dark mode toggle: Ensure `dark` class on HTML root, verify Tailwind config.

Character count: ~2,200 (still under 6,000 limit)